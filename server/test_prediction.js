/**
 * Test script to debug the plant disease prediction endpoint
 */
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');

async function testPrediction() {
  console.log('üß™ Testing Plant Disease Prediction Endpoint');
  console.log('=' * 50);
  
  try {
    // Create a test image
    console.log('1. Creating test image...');
    const testImagePath = 'test_prediction.jpg';
    
    const jpegData = Buffer.from([
      0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
      0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
      0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
      0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
      0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1A, 0x1B,
      0x1F, 0x2B, 0x2F, 0x31, 0x30, 0x2B, 0x2C, 0x38, 0x3A, 0x36, 0x33, 0x3F,
      0x3D, 0x38, 0x3A, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01, 0x00,
      0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF,
      0xC4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xC4,
      0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA,
      0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00,
      0x00, 0xFF, 0xD9
    ]);
    
    fs.writeFileSync(testImagePath, jpegData);
    console.log(`‚úÖ Created test image: ${testImagePath}`);
    
    // Test the prediction endpoint
    console.log('\n2. Testing prediction endpoint...');
    
    const formData = new FormData();
    formData.append('image', fs.createReadStream(testImagePath));
    
    console.log('üì§ Sending request to prediction endpoint...');
    const response = await axios.post('http://localhost:8000/api/plant-disease/predict', formData, {
      headers: {
        ...formData.getHeaders(),
      },
    });
    
    console.log('‚úÖ Prediction successful!');
    console.log('Response:', JSON.stringify(response.data, null, 2));
    
    // Clean up
    fs.unlinkSync(testImagePath);
    console.log('\n‚úÖ Test completed successfully!');
    
    return true;
    
  } catch (error) {
    console.log('‚ùå Test failed:');
    console.log('Error message:', error.message);
    if (error.response) {
      console.log('Response status:', error.response.status);
      console.log('Response data:', JSON.stringify(error.response.data, null, 2));
    }
    return false;
  }
}

// Run the test
testPrediction();
